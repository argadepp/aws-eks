---
Description: Stack of EKS Control Plane
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  ProductOwnerEmail:
    Description: Email id of the product owner
    Type: String
  VPCId:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String


  appsubnets:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String



  ImageAmi:
    Description: Pass the proper AMI ID
    Type: String  

  ClusterName:
    Description: Name of the EKS Cluster
    Type: String

  ClusterVersion:
    Description: Cluster Version
    Type: String
    Default: "1.20"

  Product:
    Description: Product Name like Hotel/Car/Cart/Flight/Revenut/OCL
    Type: String

  ApplicationName:
    Description: Name of the application like Engine/USG
    Type: String    
Resources:
  SGPing:
    Type: AWS::EC2::SecurityGroup

    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0


########################## EKS Cluster ###################################

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Split [',', !Join [',' , [!Ref appsubnets]]] 
        

      RoleArn: !GetAtt EksServiceRole.Arn
      Version: !Ref ClusterVersion

  EksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-service-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "eks.amazonaws.com" 
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
######################### Security Groups ####################

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for master plane of the cluster
      GroupName: !Sub "${ClusterName}-control-plane-security-group"
      VpcId: !Ref VPCId
      Tags:
        - Key: "Product"
          Value: !Ref Product
        - Key: "ProductOwner"
          Value: !Ref ProductOwnerEmail


  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      GroupName: !Sub "${ClusterName}-workers-security-group"
      VpcId: !Ref VPCId
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: owned
        - Key: "Product"
          Value: !Ref Product
        - Key: "ProductOwner"
          Value: !Ref ProductOwnerEmail

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443  
  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-node-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy         

############################ NodeGroup ###################################

  MyLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: true
        ImageId: !Ref ImageAmi
        InstanceType: t2.medium
        KeyName: eks-1
        SecurityGroupIds: 
          -  !Ref NodeSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -ex
              B64_CLUSTER_CA=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1USXdOakV3TVRRek5sb1hEVE15TVRJd016RXdNVFF6Tmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT2t0CjdxZ1gyWGpwdUkxOWJKV1g1N1lkcEFqZERmbDVUVlpzVjNLL29pbTB2MmNPT0xkOGVDa1N2TVpKNU1Jdk5NSTAKVDNhVjRQdUFtUEdZYnJvRlhQUzVDczJqelcwVmI1cEEwQTVRTlR6NE1GQTFiSlhjVU43YnZnR0RWK2o2cEIxWgpOQUZxRzluNXp4U011ZU5FMHVQMkpmc3I4ZTRxY2MzOVlGRGFva1dGSlZpU0xaaXowU1k3Wjh6MzBqc1pMcWNLCjdVcU00Wko4ZXJlSlpRMlBVNFZtVWtPRGNiV2c2czhSWkx5WVFCNDluZmhYRzM1Ti9LaEszZ1YwOU1TR2RwRHAKQk1xZUtyUHVpUDJPUWZHdkE1aWs5ZzZuTDdoci9BQStVSTlwdjFOMUFRVkhKUVpGVGtPRGc0b3NzY3AvdHIzbAphWDA3aGlJZjdmY3lsZjkxVVhrQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJeXpuNWFobSs0bEp6MVdrekFLWnI2Z0l1djBNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDdjBKejUrbUltbCsvWnQvTFZWZTRTTlpMTjArakxBL0s3YWxFQVJiWHFvdGdKZ3RNMQovdEVoR0thQ01pWU5Cb0N4eTZEb0NMVE9Ud1IzNVJraHVSSjg5ZUx1THlkd3Z1ZUxjUEFjRElWRkdHV210ajNDCnhRdUlZeVR3eElxNHdXNm1HbjBiSGg5ZEhTWFNteWRtOVhIL21XcjMvaHpIeWdkbW9XdVFocDBVSStUcGlKRmUKdHdZMFphRlJpVkNubllLdVZ2SkRQbGR2OFo0MlR4dnFCcDVDZlF5aDh2eFZST2M2Zm1Mc2kxRkhGditHMmFSRwpmOXZBN21hcHJhY1A5MFQreFU5TUxkSjNzN0psWDcxNGM5NHhWSFZUcEZyaHBEZkNYRDJjZlQxUDdMSlRKUDlRCldOczdzSThjN1ZGZWdGZHhkVE1UZGxFdnRoaDNjeGk4aGhvTQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
              API_SERVER_URL=https://9ED32F0FD6B43A34810A189AF67C381A.gr7.ap-south-1.eks.amazonaws.com
              /etc/eks/bootstrap.sh eksDev --b64-cluster-ca $B64_CLUSTER_CA --apiserver-endpoint $API_SERVER_URL

  EKSNodegroupPub:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeGroupRole.Arn
      LaunchTemplate: 
        Id: !Ref  MyLaunchTemplate
        #Name: !GetAtt MyLaunchTemplate.LaunchTemplateName
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
            
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 2
      Labels:
        Name: eksNodeGroup
      Subnets: !Split [',', !Join [',' , [!Ref appsubnets]]] 
         
Outputs:
  EKSCluster:
    Description: Description about EKSCluster 
    Value: !Ref EKSCluster
        
